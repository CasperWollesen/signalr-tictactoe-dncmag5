    @{
    ViewBag.Title = "Tic-Tac-ToR";
}
@section featured {
    <section class="featured">
        <div class="content-wrapper">
            <hgroup class="title">
                @if (!Request.IsAuthenticated)
                {
                    <h1>@ViewBag.Message</h1>
                }
                else
                {
                    <h1>Challenge your Online Friends to a game
                    </h1>
                }
            </hgroup>
            <p>
                Showcasing HTML5 + SignalR + Knockout + ASP.NET Hawtness
            </p>
        </div>
    </section>
}

<section style="background: #4292de; height: auto">
    @{
        if (Request.IsAuthenticated)
        {
        <div class="game-container">
            <div id="grid" style="height: 400px">
                <canvas id="gameCanvas" style="width: 100%; height: 100%"></canvas>
            </div>
        </div>
        <div class="game-player-container">
            <div class="game-player-header">Online Users</div>
            <div>
                <ul id="activeUsersList"
                    class="game-player-list"
                    data-bind="foreach: Users">
                    <li class="game-list-item">
                        <div style="height: 30px;">
                            <div style="float: left; padding-top: 5px">
                                <span data-bind="text: UserId"></span>
                            </div>
                            <div class="game-list-item-button">
                                <div data-bind="attr: { style: $parent.showChallenge }">
                                    <button
                                        class="challenger game-list-button">
                                        Challenge
                                    </button>
                                </div>
                            </div>
                            <input
                                type="hidden"
                                data-bind="value: ConnectionId" />
                        </div>
                    </li>
                </ul>
            </div>
        </div>
        <div style="width: 100%; text-align: center; font-size: 20px">
            Next Turn :
            <label data-bind="text: CurrentPlayer()"></label>
        </div>
        }
        else
        {
        <div class="game-container">
            <div id="gridNoLogin" style="height: 400px; text-align: center">
                <h1><a href="@Url.Action("Login", "Account")">Login</a>
                </h1>
            </div>

        </div>
        }
    }
</section>

@section scripts{

    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/bundles/signalr")
    @Scripts.Render("~/bundles/ko")

    <script src="~/signalr/hubs"></script>
    <script type="text/javascript">
        var gameViewModel = function ()
        {
            var self = this;

            self.Users = ko.observableArray([]);
            self.Game = {};
            self.CurrentPlayer = ko.observable('Game not started');

            self.showChallenge = function (item)
            {
                if (item.ConnectionStatus < 3)
                {
                    return "display:visible";
                }
                else
                {
                    return "display:none";
                }
            }
        }

        $(function ()
        {
            var viewModel = new gameViewModel();
            ko.applyBindings(viewModel);
            var canvas = document.getElementById("gameCanvas");
            if (canvas)
            {
                var hSpacing = canvas.width / 3;
                var vSpacing = canvas.height / 3;
            }
            var hub = $.connection.GameNotificationHub;

            hub.client.DrawPlay = function (rowCol, game, letter)
            {
                viewModel.Game = game;
                var row = rowCol.row;
                var col = rowCol.col;
                var hCenter = (col - 1) * hSpacing + (hSpacing / 2);
                var vCenter = (row - 1) * vSpacing + (vSpacing / 2);
                writeMessage(canvas, letter, hCenter, vCenter);
                if (game.GameStatus == 0)
                {
                    viewModel.CurrentPlayer(game.NextTurn);
                }
                else
                {
                    viewModel.CurrentPlayer(game.Message);
                    alert("Game Over");
                    
                }
            };

            hub.client.joined = function (connection, dateTime)
            {
                viewModel.Users.remove(function (item) { return item.UserId == connection.UserId })
                viewModel.Users.push(connection);
            };

            hub.client.getChallengeResponse = function (connectionId, userId)
            {
                var cnf = confirm('You have been challenged to a game of Tic-Tac-ToR by \'' + userId + '\'. Ok to Accept!')
                if (cnf)
                {
                    hub.server.challengeAccepted(connectionId);
                }
                else
                {
                    hub.server.challengeRefused(connectionId);
                }
            };

            hub.client.updateSelf = function (connections, connectionName)
            {
                for (var i = 0; i < connections.length; i++)
                {
                    if (connections[i].UserId != connectionName)
                    {
                        viewModel.Users.push(connections[i]);
                    }
                }
            };

            hub.client.beginGame = function (gameDetails)
            {
                var clientId = '@User.Identity.Name';
                if (gameDetails.User1Id.UserId == clientId ||
                    gameDetails.User2Id.UserId == clientId)
                {
                    clearCanvas();
                    viewModel.Game = gameDetails;
                    viewModel.CurrentPlayer(gameDetails.NextTurn);
                }
                var oldArray = viewModel.Users;
                //var client1 = viewModel.Users.
            };

            hub.client.leave = function (connectionId)
            {
            };


            $.connection.hub.start().done(function ()
            {
                var canvasContext;
                $("#activeUsersList").delegate(".challenger", "click", function ()
                {
                    var challengeTo = ko.dataFor(this);
                    hub.server.challenge(challengeTo.ConnectionId, '@User.Identity.Name');
                });

                if (canvas && canvas.getContext)
                {
                    canvasContext = canvas.getContext('2d');
                    var rect = canvas.getBoundingClientRect();
                    canvas.height = rect.height;
                    canvas.width = rect.width;
                    hSpacing = canvas.width / 3;
                    vSpacing = canvas.height / 3;

                    canvas.addEventListener('click', function (evt)
                    {
                        if (viewModel.CurrentPlayer() == '@User.Identity.Name')
                        {
                            var rowCol = getRowCol(evt);
                            rowCol.Player = 'O';
                            hub.server.gameMove(viewModel.Game.GameId, rowCol);
                        }
                    }, false);

                    drawGrid(canvasContext);
                }

                function getRowCol(evt)
                {
                    var hSpacing = canvas.width / 3;
                    var vSpacing = canvas.height / 3;
                    var mousePos = getMousePos(canvas, evt);
                    return {
                        row: Math.ceil(mousePos.y / vSpacing),
                        col: Math.ceil(mousePos.x / hSpacing)
                    }
                }

                function getMousePos(canvas, evt)
                {

                    var rect = canvas.getBoundingClientRect();
                    return {
                        x: evt.clientX - rect.left,
                        y: evt.clientY - rect.top
                    };
                }
            });

            function clearCanvas()
            {
                if (canvas && canvas.getContext)
                {
                    var canvasContext = canvas.getContext('2d');
                    var rect = canvas.getBoundingClientRect();
                    canvas.height = rect.height;
                    canvas.width = rect.width;
                    
                    if (canvasContext)
                    {
                        canvasContext.clearRect(rect.left, rect.top, rect.width, rect.height);
                    }
                    drawGrid(canvasContext);
                }
            }

            function drawGrid(canvasContext)
            {
                var hSpacing = canvas.width / 3;
                var vSpacing = canvas.height / 3;
                canvasContext.lineWidth = "2.0";
                for (var i = 1; i < 3; i++)
                {
                    canvasContext.beginPath();
                    canvasContext.moveTo(0, vSpacing * i);
                    canvasContext.lineTo(canvas.width, vSpacing * i);
                    canvasContext.stroke();

                    canvasContext.beginPath();
                    canvasContext.moveTo(hSpacing * i, 0);
                    canvasContext.lineTo(hSpacing * i, canvas.height);
                    canvasContext.stroke();
                }
            }

            function writeMessage(canvas, message, x, y)
            {
                var canvasContext = canvas.getContext('2d');
                canvasContext.font = '40pt Calibri';
                canvasContext.fillStyle = 'red';
                var textSize = canvasContext.measureText(message);
                canvasContext.fillText(message, x - (textSize.width / 2), y + 10);
                
            }
        });
    </script>
}